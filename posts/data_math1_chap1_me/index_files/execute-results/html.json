{
  "hash": "5d170d248882077edc31d90990e44835",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"「データ解析のための数理統計入門」第1章 確率モデル 1.1標本空間\"\nformat:\n  html: default\n  revealjs:\n    output-file: page-reveal.html\n    smaller: true\n    scrollable: true\n    chalkboard: true\n    html-math-method: mathjax\ncode-fold: true\ndate: last-modified\ntoc: true\nlang: ja\ncategories:\n  - 統計\n  - データ解析のための数理統計入門\nstatus: \"完了\"\n---\n\n\n# 1.1標本空間\n\n## 用語\n\n**試行**：結果が生ずるような行為\n\n**標本空間**($\\Omega$)：試行によって起こりうるすべての結果\n\n**事象**：起こりうる結果($\\omega$)の集まり\n\n::: {.extra-space3}:::\n\n\n### 用語の具体例\nサイコロを投げる時に出る目について考える。\n\n::: {.extra-space2}:::\n\nサイコロを投げるという行為は**試行**になります。\n\n**標本空間**は試行によって起こりうるすべての結果なので、$\\Omega=\\{1,2,3,4,5,6\\}$\n\n**事象**は起こりうる結果の集まりなので、$\\{1,2\\},\\{2,5\\}$のような$\\Omega$の部分集合にあたります。\n\n::: {.extra-space3}:::\n\n## 事象と集合\n\n上で挙げた通り、試行による結果（$\\omega$）は集合の要素または元に対応する。\n\n::: {.callout-tip}\n## $\\Omega$と$\\omega$\n\n標本空間と結果が`\\Omega`（標本空間）`\\omega`（結果）になるのは意味が対応しててわかりやすいですね。\n:::\n\n::: {.extra-space2}:::\n\n**積事象**：２つの事象$A,B$がともに起こる事象\n\n::: {#fa2d8922 .cell execution_count=1}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfrom matplotlib_venn import venn2\nimport japanize_matplotlib\n\nplt.figure(figsize=(6, 6))\n\nv = venn2(subsets=(2, 2, 1))\n\nv.get_patch_by_id('10').set_color('white')\nv.get_patch_by_id('11').set_color('black')\nv.get_patch_by_id('01').set_color('white')\n\nv.get_patch_by_id('10').set_alpha(1.0)\nv.get_patch_by_id('11').set_alpha(0.3)\nv.get_patch_by_id('01').set_alpha(1.0)\n\nv.get_patch_by_id('10').set_edgecolor('black')\nv.get_patch_by_id('10').set_linewidth(2)\nv.get_patch_by_id('01').set_edgecolor('black')\nv.get_patch_by_id('01').set_linewidth(2)\n\nv.get_label_by_id('10').set_text('')\nv.get_label_by_id('11').set_text('AかつB(積事象)')\nv.get_label_by_id('01').set_text('')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-2-output-1.png){width=466 height=327}\n:::\n:::\n\n\n::: {.extra-space3}:::\n\n\n**和事象**：２つの事象$A,B$の少なくともどちらかが起こる事象\n\n::: {#513d5c82 .cell execution_count=2}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfrom matplotlib_venn import venn2\nimport japanize_matplotlib\n\nplt.figure(figsize=(6, 6))\n\nv = venn2(subsets=(2, 2, 1))\n\nv.get_patch_by_id('10').set_color('black')\nv.get_patch_by_id('11').set_color('black')\nv.get_patch_by_id('01').set_color('black')\n\nv.get_patch_by_id('10').set_alpha(0.3)\nv.get_patch_by_id('11').set_alpha(0.3)\nv.get_patch_by_id('01').set_alpha(0.3)\n\nv.get_patch_by_id('10').set_edgecolor('black')\nv.get_patch_by_id('10').set_linewidth(2)\nv.get_patch_by_id('01').set_edgecolor('black')\nv.get_patch_by_id('01').set_linewidth(2)\n\nv.get_label_by_id('10').set_text('')\nv.get_label_by_id('11').set_text('AまたはB(和事象)')\nv.get_label_by_id('01').set_text('')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-3-output-1.png){width=466 height=327}\n:::\n:::\n\n\n::: {.extra-space2}:::\n\n積事象・和事象は積集合・和集合にそれぞれ対応している。\n\n$A \\cap B = \\{x|x\\in A かつx\\in B\\}$,\n$A \\cup B = \\{x|x\\in A またはx\\in B\\}$\n\n::: {.extra-space2}:::\n\n起こりうる結果である事象を集合として捉えるといいって話ですかね。\n\n::: {.extra-space2}:::\n\n\n**補集合**：$A$の補集合とは、$A$に属さない元の集合で、$A^c$と表す。\n\n**差集合**：$AとB$の差集合とは、$A$に属するが$B$に属さない元の集合で、$A\\setminus B$と表す。また$A\\setminus B=A\\cap B^c$となる。補集合は$A^c=\\Omega \\setminus A$と表すこともできる。\n\n::: {#f051271b .cell execution_count=3}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nfrom matplotlib_venn import venn2\nimport japanize_matplotlib\n\n# 集合の定義\nA = set([1, 2, 3, 4])\nB = set([3, 4, 5, 6])\n\n# Venn 図の作成\nplt.figure(figsize=(6, 6))\nvenn = venn2([A, B], ('A', 'B'))\n\nvenn.get_patch_by_id('10').set_color('black')\nvenn.get_patch_by_id('11').set_color('white')\nvenn.get_patch_by_id('01').set_color('white')\n\nvenn.get_patch_by_id('11').set_edgecolor('black')\nvenn.get_patch_by_id('11').set_linewidth(2)\nvenn.get_patch_by_id('01').set_edgecolor('black')\nvenn.get_patch_by_id('01').set_linewidth(2)\n\n# 差集合 A - B の部分を強調\nfor subset in ('10', '11', '01'):\n    venn.get_label_by_id(subset).set_text('')\nvenn.get_label_by_id('10').set_text('A と Bの差集合')\n\nplt.title(\"差集合\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-4-output-1.png){width=466 height=374}\n:::\n:::\n\n\n::: {.extra-space2}:::\n\n**排反**：空集合を$\\emptyset$とする。$A \\cap B=\\emptyset$のときAとBは互いに排反であるという。\n\n事象同士に共通部分がないってことですかね。\n\n::: {#c2e4c36d .cell execution_count=4}\n``` {.python .cell-code}\nfrom matplotlib import pyplot as plt\nfrom matplotlib_venn import venn2\nimport japanize_matplotlib\n\nplt.figure(figsize=(7, 7))\n\nv = venn2(subsets=(2, 2, 0))\n\nv.get_patch_by_id('10').set_color('white')\n\nv.get_patch_by_id('01').set_color('white')\n\n# v.get_patch_by_id('10').set_alpha(0.3)\n# v.get_patch_by_id('11').set_alpha(0.3)\n# v.get_patch_by_id('01').set_alpha(0.3)\n\nv.get_patch_by_id('10').set_edgecolor('black')\nv.get_patch_by_id('10').set_linewidth(2)\nv.get_patch_by_id('01').set_edgecolor('black')\nv.get_patch_by_id('01').set_linewidth(2)\n\nv.get_label_by_id('10').set_text('')\nv.get_label_by_id('01').set_text('')\nplt.gca().set_axis_on()\nplt.gca().set_facecolor('white')\n\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/cell-5-output-1.png){width=540 height=253}\n:::\n:::\n\n\n::: {.extra-space2}:::\n\n### 具体例\n\nサイコロを投げる時、偶数の目が出る事象を$A=\\{2,4,6\\}$、４以上の目が出る事象を$B=\\{4,5,6\\}$とし、奇数の目が出る事象を$C=\\{1,3,5\\}$としたとき、\n\n::: {.extra-space2}:::\n\n**和事象**：$A \\cap B=\\{2,4,6\\}$\n\n**積事象**：$A \\cup B=\\{2,4,5,6\\}$\n\nとなる。\n\n$A \\cap C = \\emptyset$より、$A$と$C$は互いに排反である。\n\n::: {.extra-space3}:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}